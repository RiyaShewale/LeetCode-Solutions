class Solution {
public:
double dfs(string src, string target, map<string, vector<pair<string, double>>>& adj ,double ans,map<string, int>& vis)
{
    if(src==target)
    {
        return ans;
    }
    for(auto i: adj[src])
    {
        if(vis.find(i.first)==vis.end())
        {
            vis[i.first]=1;
            double res=dfs(i.first, target, adj, ans*i.second,vis);
            if(res!=-1) return res;
        }

    }

    return -1.0;
}
    vector<double> calcEquation(vector<vector<string>>& eq, vector<double>& val, vector<vector<string>>& queries) {
        map<string, vector<pair<string, double>>> adj;
        for(int i=0;i<eq.size();i++)
        {
            adj[eq[i][0]].push_back({eq[i][1],val[i]});
            adj[eq[i][1]].push_back({eq[i][0],1/val[i]});
        }

        vector<double> result;
        for(auto i: queries)
        {
            if(adj.find(i[0])==adj.end() || adj.find(i[1])==adj.end())
            {
                result.push_back(-1.0);
            }

            else
            {
                map<string, int> vis;
                vis[i[0]]=1;
                result.push_back(dfs(i[0], i[1], adj, 1,vis));                
            }

        }

        return result;


        
    }
};
