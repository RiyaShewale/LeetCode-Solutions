class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int m=isWater.size();
        int n=isWater[0].size();
        vector<int> dir= {-1,0,1,0,-1};
        vector<vector<int>>height(m,vector<int>(n,-1));

        queue<pair<int,int>>q;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(isWater[i][j]==1) 
                {
                    q.push({i,j});
                    height[i][j]=0;
                }
            }
        }
        int currval=1;
        while(!q.empty())
        {
            int size=q.size();
            
            for(int i=0;i<size;i++)
            {
                pair<int,int> front=q.front();
                q.pop();
                for(int k=0;k<4;k++)
                {
                    int u=front.first+dir[k];
                    int v=front.second+dir[k+1];
                    if(u<m && u>=0 && v<n && v>=0 && height[u][v]==-1)
                    {
                        height[u][v]=currval;
                        q.push({u,v});
                    }
                }
                
            }

            currval++;
        }

        return height;

    }
};
