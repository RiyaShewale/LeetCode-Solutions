class Solution {
public:

    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red, vector<vector<int>>& blue) {
        vector<vector<pair<int,int>>> adj(n);
        for(auto i: red)
        {
            adj[i[0]].push_back({i[1], 0});
        }

        for(auto i: blue)
        {
            adj[i[0]].push_back({i[1], 1});
        }

        vector<int>ans(n,-1);
        set<pair<int,int>> vis;
        queue<pair<int,int>>q;
        q.push({0,-1});
        int lvl=0;
        

        while(!q.empty())
        {
            int s=q.size();
            
            for(int i=0;i<s;i++)
            {
                int node=q.front().first;
                int col=q.front().second;
                q.pop();
                vis.insert({node,col});

                if(ans[node]==-1) ans[node]=lvl;
                
                for(auto i:adj[node])
                {
                    if((i.second== !col || col==-1) && vis.find(i)==vis.end())
                    {
                        vis.insert(i);
                        q.push(i);
                    }
                }

            }
            lvl++;
        }

        return ans;

    }
};
