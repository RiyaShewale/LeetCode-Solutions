class Solution {
public:
int solve(int left, int right,int start, int end, vector<int> & cuts, vector<vector<int>> &dp)
{
    if(start>end) return 0;

    if(dp[start][end]!=-1)return dp[start][end];

    int mini=INT_MAX;
    for(int i=start; i<=end;i++)
    {
        int ans=right-left + solve(left, cuts[i], start, i-1, cuts, dp) + solve(cuts[i], right, i+1, end, cuts, dp);
        mini=min(mini, ans);
    }

    return dp[start][end]=mini;
}
    int minCost(int n, vector<int>& cuts) {
        sort(cuts.begin(),cuts.end());
        int idx=cuts.size()-1;
        vector<vector<int>> dp(idx+1, vector<int>(idx+1,-1));
        return solve(0, n,0, idx, cuts, dp);
    }
};
