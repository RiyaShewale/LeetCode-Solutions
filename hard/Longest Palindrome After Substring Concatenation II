class Solution {
public:
    int longestPalindrome(string s, string t) {
        int m=s.size();
        int n=t.size();
        vector<int> maxs(m);
        vector<int> maxt(n);
        vector<vector<bool>> dps(m,vector<bool> (m,false));
        vector<vector<bool>> dpt(n,vector<bool> (n,false));
        int ans=0;

        for(int i=m-1;i>=0;i--)
        {
            for(int j=i;j<m;j++)
            {
                if(i==j ||(j==i+1 && s[i]==s[j]) || (s[i]==s[j] && dps[i+1][j-1]))
                {
                    dps[i][j] = true;
                    maxs[i]=max(maxs[i],j-i+1);
                    ans=max(ans,j-i+1);
                }
            }
        }

        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(i==j || (j==i+1 && t[i]==t[j]) || (t[i]==t[j] && dpt[i+1][j-1]))
                {
                    dpt[i][j] = true;
                    maxt[j]=max(maxt[j],j-i+1);
                    ans=max(ans,j-i+1);
                }
            }
        }

        vector<vector<int>> dp(m,vector<int> (n,0));
        for(int i=0;i<m;i++)
        {
            for(int j=n-1;j>=0;j--)
            {
                if(s[i]==t[j])
                {
                    dp[i][j]=1;
                    if(i>0 && j<n-1) dp[i][j]+=dp[i-1][j+1];
                }

                if(dp[i][j])
                {
                    int mid=0;
                    if(i+1<m) mid=max(mid,maxs[i+1]);
                    if(j>0) mid=max(mid,maxt[j-1]);
                    ans=max(ans, 2*dp[i][j]+mid);
                }
            }
        }

        return ans;



        
    }
};
