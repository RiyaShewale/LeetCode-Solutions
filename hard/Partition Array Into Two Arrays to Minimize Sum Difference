class Solution {
public:
    int minimumDifference(vector<int>& nums) {
        int n=nums.size();
        int total=0;
        for(auto x: nums)total+=x;
        int N=n/2;
        vector<vector<int>> left(N+1),right(N+1);
        for(int mask=0;mask<(1<<N);mask++)
        {
            int idx=0;
            int leftsum=0;
            int rightsum=0;

            for(int i=0;i<N;i++)
            {
                if(mask&(1<<i)) 
                {
                    idx++;
                leftsum+=nums[i];
                rightsum+=nums[i+N];
                }
            }

            left[idx].push_back(leftsum);
            right[idx].push_back(rightsum);
        }

        for(int i=0;i<=N;i++)
        {
            sort(right[i].begin(),right[i].end());
        }
         int res = min(abs(total-2*left[N][0]), abs(total-2*right[N][0])); 
		
		for(int idx=1; idx<N; ++idx){ 
			for(auto &a : left[idx]){ 
				int b = (total - 2*a)/2; 
				int rightidx = N-idx; 
				auto &v = right[rightidx]; 
				auto itr = lower_bound(v.begin(), v.end(),b); 

				if(itr!=v.end()) res = min(res, abs(total-2*(a+(*itr)))); 

				}                
			}
		return res;


    }
};
